// Generated by CoffeeScript 1.3.3

/*
Pie chart is a jquery plugin to display animated pie charts

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.

Built on top of the jQuery library (http://jquery.com)

@source: http://github.com/rendro/easy-pie-chart/
@autor: Robert Fleischmann
@version: 1.0.0

Thanks to Philip Thrasher for the jquery plugin boilerplate for coffee script
*/


(function() {

  (function($) {
    $.pieChart = function(el, options) {
      var animateChart, drawChart, easeInOutQuad,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.$el.data("pieChart", this);
      this.init = function() {
        _this.options = $.extend({}, $.pieChart.defaultOptions, options);
        _this.data = (function() {
          var _i, _len, _ref, _results;
          _ref = this.options.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            el = _ref[_i];
            _results.push({
              value: 0,
              color: el.color
            });
          }
          return _results;
        }).call(_this);
        _this.canvas = $("<canvas width='" + _this.options.size + "' height='" + _this.options.size + "'></canvas>").get(0);
        _this.$el.append(_this.canvas);
        if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
          G_vmlCanvasManager.initElement(_this.canvas);
        }
        _this.ctx = _this.canvas.getContext('2d');
        _this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
        _this.$el.addClass('pieChart');
        _this.$el.css({
          width: _this.options.size,
          height: _this.options.size,
          lineHeight: "" + _this.options.size + "px"
        });
        return drawChart(_this.options.data);
      };
      this.update = function(data) {
        if (_this.options.animate === false) {
          return drawChart(data);
        } else {
          return animateChart(_this.data, data);
        }
      };
      drawChart = function(data) {
        var painted, sum, _i, _len;
        _this.data = data;
        sum = 0;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          el = data[_i];
          sum += el.value;
        }
        _this.ctx.lineWidth = _this.options.lineWidth;
        painted = 0;
        return $(data).each(function(idx, el) {
          _this.ctx.strokeStyle = el.color;
          _this.ctx.save();
          _this.ctx.rotate(Math.PI * (2 * painted / sum - 0.5));
          _this.ctx.beginPath();
          _this.ctx.arc(0, 0, _this.options.size / 2 - _this.options.lineWidth / 2, 0, Math.PI * 2 * el.value / sum, false);
          _this.ctx.stroke();
          _this.ctx.restore();
          return painted += el.value;
        });
      };
      animateChart = function(from, to) {
        var currentStep, fps, steps;
        fps = 30;
        steps = fps * _this.options.animate / 1000;
        currentStep = 0;
        _this.options.onStart.call(_this);
        _this.data = to;
        if (_this.animation) {
          clearInterval(_this.animation);
        }
        return _this.animation = setInterval(function() {
          var currentData, i;
          _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
          currentData = (function() {
            var _i, _len, _results;
            _results = [];
            for (i = _i = 0, _len = to.length; _i < _len; i = ++_i) {
              el = to[i];
              _results.push({
                color: el.color,
                value: easeInOutQuad(currentStep, from[i].value, el.value - from[i].value, steps)
              });
            }
            return _results;
          })();
          drawChart(currentData);
          currentStep++;
          if ((currentStep / steps) > 1) {
            clearInterval(_this.animation);
            _this.animation = false;
            return _this.options.onStop.call(_this);
          }
        }, 1000 / fps);
      };
      easeInOutQuad = function(t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
          return c / 2 * t * t + b;
        } else {
          return -c / 2 * ((--t) * (t - 2) - 1) + b;
        }
      };
      return this.init();
    };
    $.pieChart.defaultOptions = {
      data: [],
      size: 110,
      lineWidth: 3,
      animate: false,
      onStart: $.noop,
      onStop: $.noop
    };
    $.fn.pieChart = function(options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('pieChart')) {
          return $el.data('pieChart', new $.pieChart(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

}).call(this);
